description: >
  Zint uses raw data as input which can easily lead to memory errors. Fuzzing is specialized in finding those with little effort.

## The name of the container image used for building the fuzz tests
build_container: "cifuzz/builder-zint:ubuntu_latest"

## The name of the container image used for running the fuzz tests. If
## unspecified, the image of the build container is used.
run_container: "gcr.io/oss-fuzz-base/base-runner"

## A list of source and destination paths. The source paths will be
## bind-mounted from the host filesystem to the destination paths in
## the container. Environment variables in the paths are expanded from
## the host's environment.
# mounts:
#   - $HOME/build:/build

## A relative path to the build script that executes inside the container
## and builds the project. Relative to the project root directory.
# build_script: ".code-intelligence/build.sh"

## Paths to the fuzz tests to execute
fuzz_tests:
 # - .code-intelligence/fuzz_targets/[b-z]*.cpp
  - .code-intelligence/fuzz_targets/all_barcodes_fuzzer.cpp
  - .code-intelligence/fuzz_targets/ean_fuzzer.cpp

## The sanitizers to use for the fuzz tests
## By default, only address sanitizer is used.
sanitizers:
  - address

## The fuzzing engines to use for the fuzz tests
## By default, only libfuzzer is used. Note that because Java and Go
## are only supported by libfuzzer, libfuzzer will always be used for
## Java and Go fuzz tests, independent of this setting.
engines:
 - libfuzzer

## The run time after which the fuzz tests are cancelled and
## considered as having passed. Default value is 30 minutes.
max_runtime: "30m0s"

## The number of parallel executions per fuzz test
parallel_executions: 1

## If true, do not initialize the seed corpus of the fuzz tests.
# skip_initial_corpus: false
